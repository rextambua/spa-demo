{"ast":null,"code":"var _jsxFileName = \"/Users/nitro/Desktop/spa-demo/frontend/src/App.js\";\n// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Events from \"./pages/Events\";\nimport EventDetail from \"./pages/EventDetail\";\nimport NewEvent from \"./pages/NewEvent\";\nimport EditEvents from \"./pages/EditEvents\";\nimport Root from \"./pages/Root\";\nimport EventsRoot from \"./pages/EventsRoot\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst routes = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(Root, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 24\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 30\n    }, this)\n  }, {\n    path: 'events',\n    element: /*#__PURE__*/_jsxDEV(EventsRoot, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 32\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(Events, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 38\n      }, this),\n      loader: async () => {\n        const response = await fetch('http://localhost:8080/events');\n        if (!response.ok) {\n          // setError('Fetching events failed.');\n        } else {\n          const resData = await response.json();\n          setFetchedEvents(resData.events);\n        }\n      }\n    }, {\n      path: ':eventId',\n      element: /*#__PURE__*/_jsxDEV(EventDetail, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 42\n      }, this)\n    }, {\n      path: 'new',\n      element: /*#__PURE__*/_jsxDEV(NewEvent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 37\n      }, this)\n    }, {\n      path: ':eventId/edit',\n      element: /*#__PURE__*/_jsxDEV(EditEvents, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 47\n      }, this)\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: routes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","Home","Events","EventDetail","NewEvent","EditEvents","Root","EventsRoot","jsxDEV","_jsxDEV","routes","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","loader","response","fetch","ok","resData","json","setFetchedEvents","events","App","router","_c","$RefreshReg$"],"sources":["/Users/nitro/Desktop/spa-demo/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nimport {createBrowserRouter, RouterProvider} from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Events from \"./pages/Events\";\nimport EventDetail from \"./pages/EventDetail\";\nimport NewEvent from \"./pages/NewEvent\";\nimport EditEvents from \"./pages/EditEvents\";\nimport Root from \"./pages/Root\";\nimport EventsRoot from \"./pages/EventsRoot\";\n\nconst routes = createBrowserRouter([\n  {path: '/', element: <Root/>, children: [\n      {index: true, element: <Home />},\n      {path:'events', element: <EventsRoot />, children:[\n              {index: true, element: <Events />, loader:async () =>{const response = await fetch('http://localhost:8080/events');\n\n                      if (!response.ok) {\n                          // setError('Fetching events failed.');\n                      } else {\n                          const resData = await response.json();\n                          setFetchedEvents(resData.events);\n                      }}},\n              {path:':eventId', element: <EventDetail />},\n              {path:'new', element: <NewEvent />},\n              {path:':eventId/edit', element: <EditEvents />}\n          ]},\n\n    ]}\n])\n\nfunction App() {\n  return <RouterProvider router={routes}></RouterProvider>;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,mBAAmB,EAAEC,cAAc,QAAO,kBAAkB;AACpE,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,MAAM,MAAM,gBAAgB;AACnC,OAAOC,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,UAAU,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,MAAM,GAAGX,mBAAmB,CAAC,CACjC;EAACY,IAAI,EAAE,GAAG;EAAEC,OAAO,eAAEH,OAAA,CAACH,IAAI;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAC,CAAC;EAAEC,QAAQ,EAAE,CACpC;IAACC,KAAK,EAAE,IAAI;IAAEN,OAAO,eAAEH,OAAA,CAACR,IAAI;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,CAAC,EAChC;IAACL,IAAI,EAAC,QAAQ;IAAEC,OAAO,eAAEH,OAAA,CAACF,UAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAAEC,QAAQ,EAAC,CAC1C;MAACC,KAAK,EAAE,IAAI;MAAEN,OAAO,eAAEH,OAAA,CAACP,MAAM;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAAEG,MAAM,EAAC,MAAAA,CAAA,KAAW;QAAC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAE1G,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UACd;QAAA,CACH,MAAM;UACH,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UACrCC,gBAAgB,CAACF,OAAO,CAACG,MAAM,CAAC;QACpC;MAAC;IAAC,CAAC,EACX;MAACf,IAAI,EAAC,UAAU;MAAEC,OAAO,eAAEH,OAAA,CAACN,WAAW;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC,EAC3C;MAACL,IAAI,EAAC,KAAK;MAAEC,OAAO,eAAEH,OAAA,CAACL,QAAQ;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC,EACnC;MAACL,IAAI,EAAC,eAAe;MAAEC,OAAO,eAAEH,OAAA,CAACJ,UAAU;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,CAAC;EAClD,CAAC;AAEP,CAAC,CACL,CAAC;AAEF,SAASW,GAAGA,CAAA,EAAG;EACb,oBAAOlB,OAAA,CAACT,cAAc;IAAC4B,MAAM,EAAElB;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAiB,CAAC;AAC1D;AAACa,EAAA,GAFQF,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}