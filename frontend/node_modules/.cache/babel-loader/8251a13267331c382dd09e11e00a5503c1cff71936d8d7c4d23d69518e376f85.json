{"ast":null,"code":"var _jsxFileName = \"/Users/nitro/Desktop/spa-demo/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData, json, defer } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  // if(data.isError){\n  //     return <p>{data.message}</p>\n  // }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 14\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport const eventsLoader = async () => {\n  defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","json","defer","jsxDEV","_jsxDEV","EventsPage","_s","data","events","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","eventsLoader","$RefreshReg$"],"sources":["/Users/nitro/Desktop/spa-demo/frontend/src/pages/Events.js"],"sourcesContent":["\nimport EventsList from '../components/EventsList';\nimport {useLoaderData, json, defer} from \"react-router-dom\";\n\nfunction EventsPage() {\n    const data =useLoaderData();\n    // if(data.isError){\n    //     return <p>{data.message}</p>\n    // }\n    const events = data.events\n    return (\n             <EventsList events={events} />\n    );\n}\n\nexport default EventsPage;\nasync function loadEvents (){\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        throw json(\n            {message : 'could not fetch events'},\n            {status:500});\n    } else {\n        return response;\n    }\n}\n\nexport const eventsLoader = async () => {\n    defer({\n        events: loadEvents()\n    })\n    }\n\n"],"mappings":";;AACA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAAQC,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAMC,IAAI,GAAEP,aAAa,CAAC,CAAC;EAC3B;EACA;EACA;EACA,MAAMQ,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1B,oBACSJ,OAAA,CAACL,UAAU;IAACS,MAAM,EAAEA;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAE3C;AAACN,EAAA,CATQD,UAAU;EAAA,QACHL,aAAa;AAAA;AAAAa,EAAA,GADpBR,UAAU;AAWnB,eAAeA,UAAU;AACzB,eAAeS,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMhB,IAAI,CACN;MAACiB,OAAO,EAAG;IAAwB,CAAC,EACpC;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EACrB,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpClB,KAAK,CAAC;IACFM,MAAM,EAAEM,UAAU,CAAC;EACvB,CAAC,CAAC;AACF,CAAC;AAAA,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}