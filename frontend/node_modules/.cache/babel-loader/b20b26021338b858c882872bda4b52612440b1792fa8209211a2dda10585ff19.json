{"ast":null,"code":"var _jsxFileName = \"/Users/nitro/Desktop/spa-demo/frontend/src/pages/Events.js\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { useLoaderData, json, defer, Await } from \"react-router-dom\";\nimport { Suspense } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  // if(data.isError){\n  //     return <p>{data.message}</p>\n  // }\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadedEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 39\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 13\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    throw json({\n      message: 'could not fetch events'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport const eventsLoader = async () => {\n  return defer({\n    events: loadEvents()\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","useLoaderData","json","defer","Await","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","events","children","resolve","loadedEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","response","fetch","ok","message","status","eventsLoader","$RefreshReg$"],"sources":["/Users/nitro/Desktop/spa-demo/frontend/src/pages/Events.js"],"sourcesContent":["\nimport EventsList from '../components/EventsList';\nimport {useLoaderData, json, defer, Await} from \"react-router-dom\";\nimport {Suspense} from \"react\";\n\nfunction EventsPage() {\n    const {events} =useLoaderData();\n    // if(data.isError){\n    //     return <p>{data.message}</p>\n    // }\n    return (\n            <Suspense>\n                <Await resolve={events}>\n                    {(loadedEvents)=> <EventsList events={loadedEvents} />}\n                </Await>\n            </Suspense>\n    );\n}\n\nexport default EventsPage;\nasync function loadEvents (){\n    const response = await fetch('http://localhost:8080/events');\n\n    if (!response.ok) {\n        throw json(\n            {message : 'could not fetch events'},\n            {status:500});\n    } else {\n        return response;\n    }\n}\n\nexport const eventsLoader = async () => {\n   return  defer({\n        events: loadEvents()\n    })\n    }\n\n"],"mappings":";;AACA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAAQC,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAO,kBAAkB;AAClE,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM;IAACC;EAAM,CAAC,GAAET,aAAa,CAAC,CAAC;EAC/B;EACA;EACA;EACA,oBACQM,OAAA,CAACF,QAAQ;IAAAM,QAAA,eACLJ,OAAA,CAACH,KAAK;MAACQ,OAAO,EAAEF,MAAO;MAAAC,QAAA,EACjBE,YAAY,iBAAIN,OAAA,CAACP,UAAU;QAACU,MAAM,EAAEG;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEvB;AAACR,EAAA,CAZQD,UAAU;EAAA,QACCP,aAAa;AAAA;AAAAiB,EAAA,GADxBV,UAAU;AAcnB,eAAeA,UAAU;AACzB,eAAeW,UAAUA,CAAA,EAAG;EACxB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACd,MAAMpB,IAAI,CACN;MAACqB,OAAO,EAAG;IAAwB,CAAC,EACpC;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EACrB,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAEA,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAA,KAAY;EACrC,OAAQtB,KAAK,CAAC;IACTO,MAAM,EAAES,UAAU,CAAC;EACvB,CAAC,CAAC;AACF,CAAC;AAAA,IAAAD,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}