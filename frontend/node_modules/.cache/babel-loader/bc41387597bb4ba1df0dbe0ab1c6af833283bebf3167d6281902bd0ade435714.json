{"ast":null,"code":"var _jsxFileName = \"/Users/nitro/Desktop/spa-demo/frontend/src/pages/EventDetail.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { json, useLoaderData, useParams, useRouteLoaderData } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventDetail() {\n  _s();\n  const params = useParams();\n  const data = useRouteLoaderData('event-detail');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventItem, {\n      event: data.event\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(EventDetail, \"4wV/h3ufdtqA8xf4Dnjmg0exre8=\", false, function () {\n  return [useParams, useRouteLoaderData];\n});\n_c = EventDetail;\nexport default EventDetail;\nexport async function loader(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const id = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'could not fetch selected event details'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetail\");","map":{"version":3,"names":["React","json","useLoaderData","useParams","useRouteLoaderData","EventItem","jsxDEV","_jsxDEV","Fragment","_Fragment","EventDetail","_s","params","data","children","event","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","_ref","request","id","eventId","response","fetch","ok","message","status","$RefreshReg$"],"sources":["/Users/nitro/Desktop/spa-demo/frontend/src/pages/EventDetail.js"],"sourcesContent":["import React from 'react';\nimport {json, useLoaderData, useParams, useRouteLoaderData} from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\n\nfunction EventDetail() {\n    const params = useParams()\n    const data = useRouteLoaderData('event-detail')\n\n    return (\n        <>\n            <EventItem event={data.event}/>\n        </>\n    );\n}\n\nexport default EventDetail;\n\nexport async function loader({ request, params }) {\n    const id = params.eventId;\n    const response = await fetch('http://localhost:8080/events/' + id);\n    if (!response.ok) {\n        throw json(\n            {message : 'could not fetch selected event details'},\n            {status:500});\n    } else {\n        return response;\n    }\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,IAAI,EAAEC,aAAa,EAAEC,SAAS,EAAEC,kBAAkB,QAAO,kBAAkB;AACnF,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEhD,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAMC,MAAM,GAAGT,SAAS,CAAC,CAAC;EAC1B,MAAMU,IAAI,GAAGT,kBAAkB,CAAC,cAAc,CAAC;EAE/C,oBACIG,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACIP,OAAA,CAACF,SAAS;MAACU,KAAK,EAAEF,IAAI,CAACE;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC;EAAC,gBACjC,CAAC;AAEX;AAACR,EAAA,CATQD,WAAW;EAAA,QACDP,SAAS,EACXC,kBAAkB;AAAA;AAAAgB,EAAA,GAF1BV,WAAW;AAWpB,eAAeA,WAAW;AAE1B,OAAO,eAAeW,MAAMA,CAAAC,IAAA,EAAsB;EAAA,IAArB;IAAEC,OAAO;IAAEX;EAAO,CAAC,GAAAU,IAAA;EAC5C,MAAME,EAAE,GAAGZ,MAAM,CAACa,OAAO;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGH,EAAE,CAAC;EAClE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM3B,IAAI,CACN;MAAC4B,OAAO,EAAG;IAAwC,CAAC,EACpD;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EACrB,CAAC,MAAM;IACH,OAAOJ,QAAQ;EACnB;AACJ;AAAC,IAAAN,EAAA;AAAAW,YAAA,CAAAX,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}